<!--
    IMPORTANT:
    - Policy elements can appear only within the <inbound>, <outbound>, <backend> section elements.
    - To apply a policy to the incoming request (before it is forwarded to the backend service), place a corresponding policy element within the <inbound> section element.
    - To apply a policy to the outgoing response (before it is sent back to the caller), place a corresponding policy element within the <outbound> section element.
    - To add a policy, place the cursor at the desired insertion point and select a policy from the sidebar.
    - To remove a policy, delete the corresponding policy statement from the policy document.
    - Position the <base> element within a section element to inherit all policies from the corresponding section element in the enclosing scope.
    - Remove the <base> element to prevent inheriting policies from the corresponding section element in the enclosing scope.
    - Policies are applied in the order of their appearance, from the top down.
    - Comments within policy elements are not supported and may disappear. Place your comments between policy elements or at a higher level scope.
-->
<policies>
    <inbound>
        <base />
        <set-header name="x-edgraph-instanceId" exists-action="override">
            <value>@{ 
                string[] pathSplit = context.Request.Url.Path.Split('/');
                
                if (pathSplit.Length > 0)
                {
                    Guid parsedGuid;

                    if (Guid.TryParse(pathSplit[1], out parsedGuid))
                    {
                        return parsedGuid.ToString("D");
                    }
                    else
                    {
                        return string.Empty;
                    }
                }
                else
                {
                    return string.Empty;
                }
            }</value>
        </set-header>
        <set-backend-service backend-id="servicefabric" sf-service-instance-name="@{ 
                string[] instanceId;
                
                if (context.Request.Headers.TryGetValue("x-edgraph-instanceId", out instanceId))
                {
                    if (instanceId[0] != string.Empty)
                    {
                        return "fabric:/EdGraph.EdFi/v2.6/" + instanceId[0] + "/WebApi";
                    }
                    else
                    {
                        return null;
                    }
                }
                else
                {
                    return null;
                }
            }" />
        <rewrite-uri template="@{
                string[] instanceId;
                
                if (context.Request.Headers.TryGetValue("x-edgraph-instanceId", out instanceId))
                {
                    if (instanceId[0] != string.Empty)
                    {
                        return context.Request.Url.Path.Replace('/' + instanceId[0], string.Empty);
                    }
                    else
                    {
                        return null;
                    }
                }
                else
                {
                    return null;
                }
        }" />
    </inbound>
    <backend>
        <base />
    </backend>
    <outbound>
        <base />
    </outbound>
    <on-error>
        <base />
    </on-error>
</policies>